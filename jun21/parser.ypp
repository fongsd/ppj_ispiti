%{

    #include <iostream>
    #include <cstdlib>
    #include <map>
    #include <string>
    #include <cstring>
    using namespace std;
    
    map<string, string> promenljive;

    void yyerror(string s)
    {
        cerr<<s<<endl;
        exit(EXIT_FAILURE);
    }

    int yylex();
%}

%union {
    string *s;
    int d;
}

%token <s> niska_token id_token;
%token <d> broj;
%token print_token op_dodele lower_token upper_token;
%type <s> izraz;
%left '*' '+'
%%

NizNaredbi: NizNaredbi naredba '\n'
| naredba '\n';

naredba: id_token op_dodele izraz { 
    promenljive[*$1] = *$3;
    delete $1;
}
| print_token '(' izraz ')' {
//     cout<<*$3<<endl;
//     cout<<*$3<<endl;
    cout<<*$3<<endl;
}
;

izraz: niska_token {
//     cout<<*$1<<endl;
//     $$ = *$1;   
    string *b = $1;
    b->pop_back();
//     cout<<*b<<endl;
//     string a = "123";
//     string c ="adas123214dAS";
//     cout<<a + c<<endl;
    $$ = new string(*b);
    delete $1;
}
| id_token {

    auto it = promenljive.find(*$1);
    
    if (it == promenljive.end()) 
    {
        yyerror("failed");
    }
    else
    {
        $$ = new string(it->second);
        delete $1;
    }
}
| izraz '*' broj {
    string *b = $1;
    
    string c;
    for (int i =0 ; i < $3; i++)
        c+=*b;
    $$ = new string(c);
/*    
    string a = "asdsad";
    strinb */
}
| broj '*' izraz {
    string *b = $3;
    
    string c;
    for (int i =0 ; i < $1; i++)
        c+=*b;
    $$ = new string(c);
/*    
    string a = "asdsad";
    strinb */
}
| izraz '+' izraz{
    string *b = $1;
    string *a = $3;
    string c = *b  + *a;
    $$ = new string(c);
}
| '(' izraz ')' '*' broj {
    string *b = $2;
    
    string c;
    for (int i =0 ; i < $5; i++)
        c+=*b;
    $$ = new string(c);
/*    
    string a = "asdsad";
    strinb */
}
| id_token '[' broj ':' broj ']' {
    auto it = promenljive.find(*$1);
    
    if (it == promenljive.end())
    {
        yyerror("failed");
    }
    else
    {
        string *b = new string(it->second);
        
        $$ = new string(b->substr($3, $5));
//         cout<<*b<<endl;
//         $$ = b;
    }
}
| id_token '[' broj ':' ']' {
  auto it = promenljive.find(*$1);
    
    if (it == promenljive.end())
    {
        yyerror("failed");
    }
    else
    {
        string *b = new string(it->second);
//         *b = *b + $3;
        $$ = new string(b->substr($3));
//         cout<<*b<<endl;
//         $$ = b;
    }

}
| id_token '[' ':' broj ']' {
  auto it = promenljive.find(*$1);
    
    if (it == promenljive.end())
    {
        yyerror("failed");
    }
    else
    {
        string *b = new string(it->second);
//         *b = *b + $3;
        for (int i = 0; i < $4; i++)
            b->pop_back();
        $$ = new string(b->substr(0, $4));
//         cout<<*b<<endl;
//         $$ = b;
    }

}
| "reverse" '(' niska_token ')' {
    
    string b = $3;
    int i = 0;
    while (b) 
    {
        char c = b[i];
        b[i] = b->end() - i ;
        b[b->end() - i] = c;
    }
    $$ = new string(*b);
}
;

%%

int main()
{
    yyparse();
    
    return 0;

}


